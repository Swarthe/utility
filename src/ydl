#!/usr/bin/env bash
#
# ydl: Download video or audio from the internet with metadata using yt-dlp
#
# Copyright (C) 2021 Emil Overbeck <https://github.com/Swarthe>
#
# Subject to the MIT License. See LICENSE.txt for more information.
#

#
# User I/O functions and variables
#

readonly normal="$(tput sgr0)"
readonly bold="$(tput bold)"
readonly bold_red="${bold}$(tput setaf 9)"

usage ()
{
    cat << EOF
Usage: ydl [OPTION]... [-t] [TARGET] [URL|NAME|YT-DLP OPTION]...
Download video or audio from the internet.

Options:
  -a    download media as audio
  -c    prepend the creator's name to the filename
  -i    prepend playlist media index to the filename
  -A    prepend album name to the filename
  -t    specify the target directory for the download
  -g    specify 'on' to enable graphical user I/O; specify 'off' to disable
          (overrides '\$UTILITY_GRAPHICAL')
  -h    display this help text

Example: ydl -ct ~/video [URL]

Environment variables:
  UTILITY_GRAPHICAL     set to '1' to enable graphical user I/O

Note: The download arguments can either be URLs or search strings.
      Media is downloaded as video in current working directory by default.
EOF
}

err ()
{
    printf '%berror:%b %s\n' "$bold_red" "$normal" "$*" >&2
}

gerr ()
{
    notify-send -i /usr/share/icons/Papirus-Dark/32x32/apps/youtube-dl.svg \
    -u critical 'ydl' "$*"
}

ginfo ()
{
    notify-send -i /usr/share/icons/Papirus-Dark/32x32/apps/youtube-dl.svg \
    'ydl' "$*"
}

#
# Handle arguments
#

while getopts :ht:aciAg: opt; do
    case "${opt}" in
    h)
        usage; exit
        ;;
    t)
        # add leading slash to avoid changing the filename
        target="${OPTARG}/"
        ;;
    a)
        file_format=('-x' '-f' 'ba')
        ;;
    c)
        creator="%(creator)s - "
        ;;
    i)
        index="%(playlist_index)s. "
        ;;
    A)
        album="%(album)s - "
        ;;
    g)
        case "$OPTARG" in
        on)
            graphical=1
            ;;
        off)
            graphical=0
            ;;
        *)
            err "Invalid argument '$OPTARG' for option 'g'"
            printf '%s\n' "Try 'ydl -h' for more information."
            exit 1
            ;;
        esac
        ;;
    \?)
        err "Invalid option '$OPTARG'"
        printf '%s\n' "Try 'ydl -h' for more information."
        exit 1
        ;;
    esac
done

shift $((OPTIND-1))
args=("$@")

# Determine whether or not to use graphical output
if [ -z "$graphical" ] && [ "$DISPLAY" ]; then
    [ "$UTILITY_GRAPHICAL" = 1 ] && graphical=1
else
    [ "$graphical" = 0 ] && graphical=''
fi

#
# Run the download
#

# Default yt-dlp options for video, if not set for audio
# yt-dlp cannot embed subtitles in audio files
if [ -z "$file_format" ]; then
    file_format=('--embed-subs' '--all-subs')
fi

ydl_options=('--embed-thumbnail' '--add-metadata' "${file_format[@]}" \
             '--embed-chapters' '--no-windows-filenames' \
             '--default-search' 'ytsearch'
             # Recently broken
             # '--cookies-from-browser' "$BROWSER" \
             '-o' "${target}${creator}${album}${index}%(title)s.%(ext)s")

# Exit immediately on SIGINT to avoid announcing failure when the user intended
# to exit anyway
trap 'exit 2' INT

if [ "$args" ]; then
    if yt-dlp "${ydl_options[@]}" "${args[@]}"; then
        [ $graphical ] && ginfo "Download successful"
    else
        [ $graphical ] && gerr "Download failed"
        exit 2
    fi
else
    err "Missing argument"
    printf '%s\n' "Try 'ydl -h' for more information."
    exit 1
fi
